#!/usr/bin/env python3
"""
Script de Valida√ß√£o da Padroniza√ß√£o de Cores - Sistema Pulse
Verifica se todas as cores est√£o seguindo o padr√£o roxo definido
"""

import os
import re
from pathlib import Path

def check_color_consistency():
    """Verifica consist√™ncia das cores nos arquivos"""
    
    print("üé® VALIDA√á√ÉO DA PADRONIZA√á√ÉO DE CORES - SISTEMA PULSE")
    print("=" * 60)
    
    # Cores que devem estar presentes
    expected_colors = {
        "primary": "#8e44ad",
        "primary_dark": "#7d3c98", 
        "success": "#27ae60",
        "warning": "#f39c12",
        "danger": "#e74c3c",
        "info": "#3498db"
    }
    
    # Arquivos para verificar
    files_to_check = [
        "static/css/pulse_theme.css",
        "static/admin/css/pulse_admin.css",
        "templates/core/consultorio_dashboard_fixed.html",
        "templates/core/consultorio_agenda.html",
        "templates/core/consultorio_pacientes.html", 
        "templates/core/consultorio_financeiro.html",
        "templates/base.html"
    ]
    
    base_path = Path(__file__).parent
    results = []
    
    print("üìÅ VERIFICANDO ARQUIVOS:")
    print("-" * 40)
    
    for file_path in files_to_check:
        full_path = base_path / file_path
        if full_path.exists():
            with open(full_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # Verificar se usa vari√°veis CSS ou cores diretas
            uses_variables = bool(re.search(r'var\(--pulse-', content))
            uses_theme_import = bool(re.search(r'pulse_theme\.css', content))
            has_purple_colors = bool(re.search(r'#8e44ad|#7d3c98', content))
            
            status = "‚úÖ CONFORME"
            if not (uses_variables or uses_theme_import or has_purple_colors):
                status = "‚ö†Ô∏è  VERIFICAR"
            
            results.append({
                'file': file_path,
                'status': status,
                'uses_variables': uses_variables,
                'imports_theme': uses_theme_import,
                'has_colors': has_purple_colors
            })
            
            print(f"{status} {file_path}")
            if uses_variables:
                print(f"    ‚Ü≥ Usa vari√°veis CSS: Sim")
            if uses_theme_import:
                print(f"    ‚Ü≥ Importa tema: Sim")
            if has_purple_colors:
                print(f"    ‚Ü≥ Cores roxas: Sim")
            print()
        else:
            print(f"‚ùå AUSENTE {file_path}")
            results.append({
                'file': file_path,
                'status': '‚ùå AUSENTE',
                'uses_variables': False,
                'imports_theme': False,
                'has_colors': False
            })
    
    print("\nüîç RESUMO DA VALIDA√á√ÉO:")
    print("-" * 40)
    
    conformes = sum(1 for r in results if "‚úÖ" in r['status'])
    total = len(results)
    
    print(f"Arquivos conformes: {conformes}/{total}")
    print(f"Percentual de conformidade: {(conformes/total)*100:.1f}%")
    
    if conformes == total:
        print("\nüéâ PARAB√âNS! Todos os arquivos seguem o padr√£o de cores!")
        print("‚úÖ Sistema 100% padronizado com esquema roxo")
    else:
        print(f"\n‚ö†Ô∏è  {total-conformes} arquivo(s) precisam de ajuste")
    
    print("\nüé® CORES PADR√ÉO DEFINIDAS:")
    print("-" * 40)
    for name, color in expected_colors.items():
        print(f"‚Ä¢ {name.title()}: {color}")
    
    return conformes == total

def check_theme_file():
    """Verifica se o arquivo de tema principal existe e est√° completo"""
    
    print("\nüìã VERIFICA√á√ÉO DO ARQUIVO DE TEMA:")
    print("-" * 40)
    
    theme_file = Path(__file__).parent / "static/css/pulse_theme.css"
    
    if not theme_file.exists():
        print("‚ùå Arquivo pulse_theme.css n√£o encontrado!")
        return False
    
    with open(theme_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Verificar se cont√©m as vari√°veis essenciais
    required_vars = [
        "--pulse-primary",
        "--pulse-primary-dark", 
        "--pulse-success",
        "--pulse-warning",
        "--pulse-gradient-primary"
    ]
    
    missing_vars = []
    for var in required_vars:
        if var not in content:
            missing_vars.append(var)
    
    if missing_vars:
        print(f"‚ùå Vari√°veis ausentes: {', '.join(missing_vars)}")
        return False
    else:
        print("‚úÖ Todas as vari√°veis CSS est√£o definidas")
        print("‚úÖ Arquivo de tema completo e funcional")
        return True

def main():
    """Fun√ß√£o principal"""
    
    os.chdir(Path(__file__).parent)
    
    # Verificar consist√™ncia de cores
    colors_ok = check_color_consistency()
    
    # Verificar arquivo de tema
    theme_ok = check_theme_file()
    
    print("\n" + "=" * 60)
    print("üèÅ RESULTADO FINAL:")
    
    if colors_ok and theme_ok:
        print("‚úÖ SISTEMA 100% PADRONIZADO!")
        print("üé® Todas as cores seguem o padr√£o roxo definido")
        print("üöÄ Interface m√©dica moderna e consistente")
        exit(0)
    else:
        print("‚ö†Ô∏è  Sistema precisa de ajustes na padroniza√ß√£o")
        exit(1)

if __name__ == "__main__":
    main()